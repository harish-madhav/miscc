VM-VM ping
1) 2 VMS diff version ubuntu
2) ip addr show
3) ping

--------------------------------------------------------------------------------------------------

VM-Host ping
1) Settings -> network -> Bridged adapter
2) ip addr show
3) ipconfig (host)
4) ping

----------------------------------------------------------------------------------------------------

Cold migration
1) Create java file
2) Close vm and export appliance
3) Share .ova file
4) Import appliance
5) run file

-----------------------------------------------------------------------------------------------------

Live migration (XEN)
1) Citric xen center
2) add server - ip, pwd of tce
3) right click tce server - create vm
4) select ubuntu pangolin, name, iso image, select tce server
5) add a server - ip, pwd of xenserver
6) ur vm - rightclick - move - select xenserver
7) done :)

------------------------------------------------------------------------------------------------------

Shared folder
1) VM -> Settings -> shared folder -> + -> folder in host -> auto mount, make permanent
2) do for both vms
3) start vm -> devices -> install guest addition -> run
4) enter -> sudo reboot
5) 3,4 for another vm
6) sudo usermod -aG vboxsf $USER
	sudo reboot
7) go to files -> other locations -> computer -> media -> right click - open in terminal
8) sudo su
9) cd sf_foldername/
10) save file
11) open same file in another vm

------------------------------------------------------------------------------------------------------

KVM
1) uname -a   (64 bit)
2) apt-cache search qemu-kvm
3) sudo su
4) apt-get install qemu-kvm
5) apt-get install libvirt-bin
6) apt-get install bridge-utils qemu-system virt-manager
7) sudo nano /etc/libvirt/libvirtd.conf
	check if all lines are present:
	listen_addr = "0.0.0.0"
	unix_sock_group = "libvirt"
	unix_sock_ro_perms = "0777"
	unix_sock_rw_perms = "0777"
	unix_sock_dir = "/var/run/libvirt"
	auth_unix_ro = "none"
	auth_unix_rw = "none"
8) virsh list
9) virsh
10) version
11) nodeinfo


Go to virtual machine manager

check qemu/kvm connected:
if permission denied in terminal put:  
sudo usermod -aG libvirt $(whoami)
sudo systemctl status libvirtd
sudo systemctl restart libvirtd
try again


1) File -> new vm -> import existing disk image -> cirros image 
	if cirros not present download: wget https://download.cirros-cloud.net/0.5.1/cirros-0.5.1-x86_64-disk.img

that's all vm creation

----------------------------------------------------------------------------------------------------------------------------

create image from ISO - KVM

sudo su
dd of=/dev/zero of=Sparse.qcow2 bs=1M count=1 seek=10240

download iso img
wget http://releases.ubuntu.com/16.04/ubuntu-16.04.6-server-i386.iso

download qcow2 file
wget http://cloud-images.ubuntu.com/releases/16.04/release/ubuntu-16.04-server-cloudimg-amd64-disk1.img -O ubuntu-16.04.6.qcow2

create vm 
local existing media
use ISO image

select or create custom storage
select qcow2 file


Install ubuntu server
config keyboard - no

hostname - ubuntu
vmname - tceit123
password - tceit123

encryption - no
unmount partitions - yes

partition disk - guided-use entire disk
write changes to disk - yes

openssh server

-------------------------------------------------------------------------------------------------------------------

Disk conversion, resizing

Conversion

qemu-img convert -O raw xxx.qcow2 yyy.img -p
qemu-img convert -O vpc xxx.img yyy.vhd -p 
qemu-img convert -O vpc xxx.qcow2 yyy.vhd -p 
qemu-img convert -O raw xxx.vhd yyy.img -p


Resize

Adding: qemu-img resize /path/to/your-image.qcow2 +SIZE
	SIZE – adds that much GB
Reducing: qemu-img resize --shrink disk.qcow2 NEW_SIZE
	NEW_SIZE – reduces disk size to given size

-----------------------------------------------------------------------------------------------------

Hyper-V - VM

download ubuntu.iso and keep

server manager
Add roles and features
HyperV
Virt switch - ethernet
credssp
install and close

open hyperv manager

right cick - new - vm
Name
generation2
cpu, mem
connection - ethernet - virt switch
Create virt hard disk
install os from bootable file

powershell
start-vm -name VM_NAME
GET-VM | where {$_.State -eq 'Running'}

Start-VM -Name "MyVM"
Stop-VM -Name "MyVM"

------------------------------------------------------------------------------------------------

Network virt - Linux Bridge

10.184.61.9 - put ur ip instead
10.184.61.1 - change last dig in ip

1.	Open terminal
2.	Login as sudo -s (root User)
3.	brctl addbr my-bridge
4.	ip addr show
5.	brctl addif my-bridge enp0s3
6.	ifconfig enp0s3
7.	ifconfig my-bridge 10.184.61.9 netmask 255.255.255.0
8.	route -n
9.	route add default gateway 10.184.61.1 dev my-bridge
10.	Check command route -n
11.	Check command brctl show

----------------------------------------------------------------------------------------------------

Open vSwitch

1. sudo apt update
sudo apt install openvswitch-switch -y
2. sudo systemctl start openvswitch-switch
sudo systemctl enable openvswitch-switch
sudo systemctl status openswitch-switch
3. sudo ovs-vsctl add-br ovs-br0
4. sudo ovs-vsctl add-port ovs-br0 enp0s3
5. sudo ovs-vsctl show

-----------------------------------------------------------------------------------------------------

Storage virt on Linux

1. Create a VM
2. Add additional storage to the VM
In VirtualBox, select your VM and click Settings -> Storage -> Click on Controller: SATA ->
Add Hard Disk icon
Choose Create new disk > Allot size > Click Finish

choose the new disk -> ok

Login as sudo -s (root User)

List all disks and partitions: 
fdisk -l

Display physical volumes: 
pvdisplay
Display volume groups: 
vgdisplay
Display logical volumes: 
lvdisplay
Create physical volume: 
pvcreate /dev/sdb (Your additional storage device name)
Create LVM on new disk: 
vgcreate demo-vg /dev/sdb
lvcreate -L 10G -n demo-lv demo-vg

Create file system and mount: 
mkfs.ext4 /dev/demo-vg/demo-lv
mkdir /mnt/lvm-demo
mount /dev/demo-vg/demo-lv /mnt/lvm-demo


df -h

-----------------------------------------------------------------------------------------------


Storage virtualisation on windows

Press Win + R, type diskmgmt.msc, and hit Enter
Select a Volume. In the menu bar, click Action > Create VHD.
Choose a location to save the VHD file (e.g., D:\Backup\MyDisk.vhd).
Select the size of the disk (e.g., 20 GB).
Select format: VHD or VHDX 
Choose type: Fixed size

After creation, the new disk appears in Disk 
Right-click it → Initialize Disk → Choose MBR

Right-click the unallocated space → New Simple Volume.
Assign a drive letter (e.g., F:).
Format with NTFS

Now the VHD acts like a real drive, and you can copy data into it.

go to Disk Management.
Right-click the VHD → Detach VHD.
The .vhd/.vhdx file remains stored in your chosen1

Copy the .vhd or .vhdx file to the new host (via USB, external HDD, or network).
Mount the VHD on the New Host
o Open Disk Management (diskmgmt.msc).
o Click Action > Attach VHD.
o Browse to the transferred .vhd/.vhdx file and click OK

The VHD will appear as a new disk with its assigned partitions.
o It will also appear in File Explorer with its drive letter (e.g., E:).
o You can now access the data as if it were a physical disk.

-------------------------------------------------------------------------------------

Openstack

sudo apt update && sudo apt upgrade -y
sudo snap install microstack --classic
	classic not availavble
sudo snap install microstack --classic --edge
sudo microstack init --auto
	error
sudo microstack init --auto --control
microstack.openstack endpoint list

sudo microstack.openstack dashboard url
	error
ip a
	inet address

https://ipaddress

	advanced -> proceed

sudo snap get microstack config.credentials.password
	error
sudo cat /var/snap/microstack/common/etc/microstack.rc
	take username, password and login openstack


openstack dashboard
Go to: Project > Compute > Key PairsUbuntu13
Click Create Key Pair
Give it a name e.g busa-key

Save the private key (.pem file) to your host machine


Go to: Project > Compute > Images
Click Create ImageUbuntu16Fill in:
Name: ubuntu-22.04
Image Source: URL or file
Format: QCOW2
You can use Ubuntu Cloud Image: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img
Open a browser in the Ubuntu VM, copy and paste the link above and download the Ubuntu image.

Upload the Image to OpenStack (MicroStack)

microstack.openstack image list


Fill the Launch Instance Form

Instance Name: my-first-vm
Count: 1
Availability Zone: nova
Instance Boot Source: Choose Image
Image Name: Select Ubuntu-22.04
Flavor: Choose m1.small
Select a network, usually called external.
Select a keypair to access your VM via SSH.
Click “Launch Instance"


------------------------------------------------------------------------------------------------------------------------------------------------------


File sharing using FTP

VM1:

sudo apt install vsftpd
sudo nano /etc/ vsftpd.conf

paste these lines:

listen=YES
write_enable=YES
pasv_enable=YES
pasv_min_port=40000
pasv_max_port=40100

Uncomment line:
chroot_local_user=YES

modify line:
listen_ipv6=NO


sudo adduser ftpuser
sudo chmod a-w /home/ftpuser
sudo mkdir /home/ftpuser/uploads
sudo chown ftpuser:ftpuser /home/ftpuser/uploads

sudo ufw allow 21/tcp
sudo ufw allow 40000:40100/tcp
sudo ufw enable

sudo systemctl daemon-reload
sudo systemctl enable vsftpd
sudo systemctl status vsftpd

su - ftpuser

cd uploads

echo "Hello from FTP server" > text.txt

VM2:

sudo apt update
sudo apt install ftp -y
ftp <VM1_IP>

login as ftpuser

cd uploads
ls

get text.txt
cat text.txt

op should be "Hello from FTP server"

echo "Hello from FTP client" > newfile.txt
put newfile.txt
ls
bye

VM1:
su - ftpuser
cd /home/ftpuser/uploads
cat newfile.txt


op should be "Hello from FTP client"


--------------------------------------------------------------------------------------------------


WORKINGGGGG

#http file transfer
sudo ufw disable
python3 -m http.server 8080

--------------------------------------------------------------------------------------------------

#shared folder
sudo apt install build-essential dkms linux-headers-$(uname -r)
sudo usermod -aG vboxsf $USER
sudo reboot
ls /media/sf_SharedFolder

--------------------------------------------------------------------------------------------------

#ftp
sudo apt install vsftpd
sudo nano /etc/vsftpd.conf

listen=YES
write_enable=YES
pasv_enable=YES
pasv_min_port=40000
pasv_max_port=40100 

chroot_local_user = YES
listen_ipv6 = NO

sudo adduser ftpuser
sudo chmod a-w /home/ftpuser
sudo mkdir /home/ftpuser/uploads
sudo chown ftpuser:ftpuser /home/ftpuser/uploads
sudo ufw disable

sudo systemctl daemon-reload
sudo systemctl enable vsftpd
sudo systemctl status vsftpd

login to ftpuser & create file in "uploads" directory

vm2: ftp <ip> in other vm
vm2: create another file & upload it to ftpserver

--------------------------------------------------------------------------------------------------

#NFS

sudo ufw disable
server vm: sudo apt install nfs-kernel-server
client vm: sudo apt install nfs-common

server vm: sudo mkdir -p /mnt/sharedfolder
sudo chmod 777 /mnt/sharedfolder
sudo nano /etc/exports
/mnt/sharedfolder 192.168.56.0/24(rw,sync,no_subtree_check)

sudo exportfs -a
sudo systemctl restart nfs-kernel-server

client vm:
sudo mkdir -p /mnt/nfsshare
sudo mount <server ip>:/mnt/sharedfolder /mnt/nfsshare

create files in /mnt/nfsshare and check it in server vm

--------------------------------------------------------------------------------------------------

#ssh
both vm:
sudo apt install openssh-server -y
sudo ufw disable

ssh <username>@<ip>

create file in vm2 & check it in vm1
